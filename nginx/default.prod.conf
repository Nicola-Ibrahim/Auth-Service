server {
    listen 80;  # Listen for HTTP traffic on port 80
    server_name yourdomain.com;  # Replace with your production domain

    # Security headers to enhance application security
    add_header X-Frame-Options DENY;  # Prevent clickjacking by disallowing framing
    add_header X-Content-Type-Options nosniff;  # Prevent MIME-type sniffing
    add_header X-XSS-Protection "1; mode=block";  # Enable XSS protection
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";  # Enforce HTTPS for one year

    # WebSocket support
    location /v1/ws {  # Change this path to match your WebSocket endpoint
        proxy_pass http://app:8000;  # Forward WebSocket requests to the FastAPI app
        proxy_http_version 1.1;  # Use HTTP/1.1 for WebSocket support
        proxy_set_header Upgrade $http_upgrade;  # Allow upgrade to WebSocket
        proxy_set_header Connection "upgrade";  # Set connection header to upgrade
        proxy_set_header Host $host;  # Preserve the original Host header
        proxy_set_header X-Real-IP $remote_addr;  # Forward the client's real IP address
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forward the client's IP address chain
        proxy_set_header X-Forwarded-Proto $scheme;  # Forward the original request scheme (HTTP/HTTPS)
    }

    location / {
        proxy_pass http://app:8000;  # Forward requests to the FastAPI app running on port 8000
        proxy_set_header Host $host;  # Preserve the original Host header
        proxy_set_header X-Real-IP $remote_addr;  # Forward the client's real IP address
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forward the client's IP address chain
        proxy_set_header X-Forwarded-Proto $scheme;  # Forward the original request scheme (HTTP/HTTPS)

        # Timeout settings for better handling of slow responses
        proxy_connect_timeout 60s;  # Timeout for establishing connection to the upstream server
        proxy_read_timeout 60s;  # Timeout for reading response from the upstream server
        proxy_send_timeout 60s;  # Timeout for sending requests to the upstream server
        send_timeout 60s;  # Timeout for sending responses to the client

        # Buffering settings to improve performance
        proxy_buffering on;  # Enable buffering of responses
        proxy_buffers 16 16k;  # Set the number and size of buffers for response
        proxy_buffer_size 32k;  # Set the size of the buffer for the first part of the response
        proxy_cache_bypass $http_upgrade;  # Bypass cache for WebSocket upgrade requests
    }

    # Enable Gzip compression for better performance
    gzip on;  # Enable Gzip compression
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml;  # Specify MIME types to compress
    gzip_vary on;  # Enable Vary header for cache control
    gzip_min_length 1000;  # Minimum response size to compress

    # Custom error page handling
    error_page 500 502 503 504 /50x.html;  # Specify custom error pages for server errors
    location = /50x.html {
        root /usr/share/nginx/html;  # Set the root for the error page location
    }

    # Optionally configure SSL for HTTPS in production (uncomment for use)
    # listen 443 ssl;  # Listen for HTTPS traffic on port 443
    # ssl_certificate /etc/nginx/ssl/server.crt;  # Path to SSL certificate
    # ssl_certificate_key /etc/nginx/ssl/server.key;  # Path to SSL certificate key
}
